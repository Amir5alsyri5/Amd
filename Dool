import os
import sys
import webbrowser
import socket
import json
import requests
import random
from user_agent import generate_user_agent
from uuid import uuid4
import uuid
from bs4 import BeautifulSoup
from datetime import datetime
import telebot
import time
import requests
import os
from concurrent.futures import ThreadPoolExecutor
from random import randint, choice
from urllib.parse import urlencode, quote
from secrets import token_hex
import concurrent.futures
from rich.console import Console
import secrets
import telebot
import random
from requests import post as pp
from user_agent import generate_user_agent as gg
from random import choice as cc
from random import randrange as rr
import re
import threading
import secrets
import os
try:
  from rich.console import Console
  from rich.live import Live
except:
  os.system("pip install rich")
  from rich.console import Console
  from rich.live import Live
try:
  import requests
except:
  os.system("pip install requests")
  import requests
try:
  from user_agent import generate_user_agent
except:
  os.system("pip install user_agent")
  from user_agent import generate_user_agent
try:
  from time import time
except:
  os.system("pip install time")
  from time import time
try:
  from hashlib import md5
except:
  os.system("pip install hashlib")
  from hashlib import md5
try:
  from uuid import uuid4
except:
  os.system("pip install uuid")
  from uuid import uuid4
try:
  from random import randrange,choice
except:
  os.system("pip install random")
  from random import randrange,choice
try:
  from concurrent.futures import ThreadPoolExecutor
except:
  os.system("pip install concurrent.futures")
  from concurrent.futures import ThreadPoolExecutor
cokie  = secrets.token_hex(8)*2  
try:
    with open('proxy100.txt', 'r') as file:
        prox = file.read().splitlines()     
except FileNotFoundError:    
    pass  
webbrowser.open('https://t.me/A_8_A_0')
ugen,viv=[],[]
for xd in range(100000):
    a='Nokia'
    b=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
    c=random.randrange(1, 99)
    d='/GoBrowser/'
    e='1.6.0.'
    f=random.randrange(1, 99)
    uaku2=(f'{a}{b}{c}{d}{e}{f}')
    ugen.append(uaku2)


Z = '\033[1;31m'
F = '\033[2;32m'
error=0
ok=0
class ProxyManager:
    def __init__(mes) ->True:
        mes.list_proxies = []
        try:
            os.remove('proxy100.txt')
            os.remove('proxy80.txt')        
        except FileNotFoundError:
        	pass
        mes.fetch_proxies()
        
    def fetch_proxies(mes):
        urls = [
            "https://api.proxyscrape.com/v2/?request=getproxies&protocol=http&timeout={}&country=all&ssl=all&anonymity=all&simplified=true",
            "https://free-proxy-list.net/",
            "https://raw.githubusercontent.com/TheSpeedX/SOCKS-List/master/http.txt",
            "https://raw.githubusercontent.com/monosans/proxy-list/main/proxies/http.txt",
            "https://proxylist.geonode.com/api/proxy-list?limit=350&page=1&sort_by=lastChecked&sort_type=desc"
        ]
        with ThreadPoolExecutor(max_workers=200) as executor:  
            executor.map(mes.fetch_proxy_from_url, urls)
        mes.save_proxies()

    def fetch_proxy_from_url(mes, url):
        try:
            response = requests.get(url)
            if response.status_code == 200:
                proxies = response.text.split("\r\n")
                mes.list_proxies.extend(proxies)
            else:
                print('')
        except requests.exceptions.RequestException as e:
            print('')

    def save_proxies(mes):
        with open('proxy_list.txt', 'w') as f:
            for ip in mes.list_proxies:
                f.write(f'{ip}\n')

class ProxyChecker:
    def __init__(mes):        
        mes.urls = 'https://raw.githubusercontent.com/TheSpeedX/SOCKS-List/master/http.txt'
        mes.check_proxies()
    def check_proxies(mes):
        try:
            with open('proxy_list.txt', 'r') as f:
                proxies = f.read().splitlines()
        except FileNotFoundError:
            print('Error: Proxy list file not found')
            exit()

        print('Starting proxy checking...')
        with ThreadPoolExecutor(max_workers=100) as executor:  # 
            executor.map(mes.check_proxy, proxies)

    def check_proxy(mes, proxy):
        global ok,error
        try:
            response = requests.get(mes.urls, proxies= {"http": f"http://{proxy}","https": f"http://{proxy}"},timeout=5)
            if response.status_code == 200:
                ok+=1              
                print(f' {F}تمَ السحب : {ok}   -   {Z}لـمْ يتم السحـبَ : {error}')
                os.system('cls' if os.name == 'nt' else 'clear')        
                with open("proxy100.txt", "a") as file:
                    file.write(proxy + "\n")
            else:
                error+=1
                print(f' {F}تمَ السحب : {ok}   -   {Z}لـمْ يتم السحـبَ : {error}')
                os.system('cls' if os.name == 'nt' else 'clear')            
        except requests.exceptions.RequestException:
            error+=1
            print(f' {F}تمَ السحب : {ok}   -   {Z}لـمْ يتم السحـبَ : {error}')
            os.system('cls' if os.name == 'nt' else 'clear')        
                                  
if __name__ == '__main__':
    os.system('cls'if os.name=='nt'else'clear')
    print(f'''\033[1;37m[\033[1;31m±\033[1;37m] توليد بروكسيلات  \033[1;31m-\033[1;33m-\033[1;34m> \033[1;37m[\033[1;31m1\033[1;37m]''')
    print('')
    mai = int(input(f'SELET :  '))
    if mai == 1:
        proxy_manager = ProxyManager()
        proxy_checker = ProxyChecker()
        mainp()
    else:
        print('Error Choice!')
        exit()	
	
